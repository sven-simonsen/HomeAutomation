esphome:
  name: dht22-sensorboard-3
  friendly_name: DHT22 Sensorboard 3

esp8266:
  board: nodemcuv2

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "3zjJoNrKeFQfjVV1uWwsyz6r9DUxJFBKH/PrQziFKK8="

ota:
  password: "f0af55f7f90406fb4621f0ee93a9d5e2"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Dht22-Sensorboard-3"
    password: "y6pSGJTlJVah"

captive_portal:
    
button:
  - platform: restart
    name: "Restart"

sensor:
  - platform: dht
    pin: D1
    model: DHT22
    temperature:
      name: "Temperatur aussen"
      id: temperatur_aussen
    humidity:
      name: "Feuchtigkeit aussen"
      id: feuchtigkeit_aussen
#    update_interval: 5min
    update_interval: 10s


  # calc based on temp and humidity sensor via internal ID
  - platform: template
    name: "Taupunkt aussen"
    id: taupunkt_aussen
    lambda: |-
      return (243.5*(log(id(feuchtigkeit_aussen).state/100)+((17.67*id(temperatur_aussen).state)/
      (243.5+id(temperatur_aussen).state)))/(17.67-log(id(feuchtigkeit_aussen).state/100)-
      ((17.67*id(temperatur_aussen).state)/(243.5+id(temperatur_aussen).state))));
    unit_of_measurement: 째C
#    update_interval: 5min
    update_interval: 10s
    icon: 'mdi:weather-fog'
    on_value:
      then:
        - output.turn_off: luefter_output


  - platform: dht
    pin: D2
    model: DHT22
    temperature:
      name: "Temperatur innen"
      id: temperatur_innen
    humidity:
      name: "Feuchtigkeit innen"
      id: feuchtigkeit_innen
#    update_interval: 5min
    update_interval: 10s


  # calc based on temp and humidity sensor via internal ID
  - platform: template
    name: "Taupunkt innen"
    id: taupunkt_innen
    lambda: |-
      return (243.5*(log(id(feuchtigkeit_innen).state/100)+((17.67*id(temperatur_innen).state)/
      (243.5+id(temperatur_innen).state)))/(17.67-log(id(feuchtigkeit_innen).state/100)-
      ((17.67*id(temperatur_innen).state)/(243.5+id(temperatur_innen).state))));
    unit_of_measurement: 째C
#    update_interval: 5min
    update_interval: 10s
    icon: 'mdi:weather-fog'
    on_value:
      then:
        - output.turn_off: luefter_output


# 
switch:
  - platform: output
    name: "L체fter-Automatik"
    icon: 'mdi:fan-auto'
    output: 
#    turn_on_action:
#      - output.turn_off: luefter_output
#    turn_off_action:
#      - output.turn_off: luefter_output
    id: luefter_input_auto
    restore_mode: ALWAYS_ON

  - platform: output
    name: "L체fter manuell"
    icon: 'mdi:fan'
    output: 
#    turn_on_action:
#      - output.turn_off: luefter_output
#    turn_off_action:
#      - output.turn_off: luefter_output
    id: luefter_input_manual


# 
output:
  - platform: gpio
    pin:
      number: D4
#      inverted: true
    id: luefter_auto_led

  - platform: gpio
    pin: D5
    id: luefter_ausgang

  - platform: template
    id: luefter_output
    type: binary
    write_action:
      lambda: !lambda |-
        if (id(luefter_input_auto).state) {
          id(luefter_auto_led).turn_on();
          id(luefter_input_manual).turn_off();

          bool relais = false;
          float taupunkt_delta = id(taupunkt_innen).state - id(taupunkt_aussen).state;

          // minimaler Taupunktunterschied, bei dem das Relais schaltet + Abstand von Ein- und Ausschaltpunkt
          if (taupunkt_delta > (5.0 + 1.0)) {
            relais = true;
          }

          // minimaler Taupunktunterschied, bei dem das Relais schaltet
          if (taupunkt_delta < (5.0)) { 
            relais = false;
          }

          // minimale Innentemperatur
          if (id(temperatur_innen).state < 10.0) {
            relais = false;
          }

          // minimale Aussentemperatur
          if (id(temperatur_aussen).state < -10.0) {
            relais = false;
          }

          if (relais == true) {
            id(luefter_ausgang).turn_on();
          } else {
            id(luefter_ausgang).turn_off();
          }
        } else {
          id(luefter_auto_led).turn_off();
          if (id(luefter_input_manual).state) {
            id(luefter_ausgang).turn_on();
          } else {
            id(luefter_ausgang).turn_off();
          }
        }
